.splash
#map
.overlay
  .story
    %a{:href => '#', :class => 'close-story'} X
    .story-text

%a.logo{:href => '#'}
  =image_tag 'litography.png'

%ul.top-bar.menu-bar
  %li
    %a.person{:href => '#'}
      =image_tag 'location/person-orange.png', :class => 'menu-icon active'
  %li
    %a.place{:href => '#'}
      =image_tag 'location/place-orange.png', :class => 'menu-icon active'
  %li
    %a.event{:href => '#'}
      =image_tag 'location/event-orange.png', :class => 'menu-icon active'
  %li
    %a.other{:href => '#'}
      =image_tag 'location/other-orange.png', :class => 'menu-icon active'

%ul.left-bar.menu-bar
  %li
    %a.audio{:href => '#'}
      =image_tag 'location/audio-orange.png', :class => 'menu-icon active'
  %li
    %a.multimedia{:href => '#'}
      =image_tag 'location/multimedia-orange.png', :class => 'menu-icon active'
  %li
    %a.visual{:href => '#'}
      =image_tag 'location/visual-orange.png', :class => 'menu-icon active'


.input-group.search
  %label{:for => 'search'}
    =image_tag 'search_icon_orange.png', :title => "Search", :class => "search-icon"
  %input.form-control{:type => 'search', :placeholder => "Search", :id => 'search'}
  %span.input-group-btn
    %button.btn.btn-default{:type => "button"} Go

:coffee
  # for global variables
  root = exports ? this

  # URLs generated in locations_controller. Used for different states of menu icons (hover, active, etc.)
  menuURLs = #{@menuURLs}

  # class for custom infobox (the inkblot). this will go away with the default google map infobox
  class InfoBoxBuilder extends Gmaps.Google.Builders.Marker # inherit from base builder
    # override method for creating infobox
    create_infowindow: ->
      return null unless _.isString @args.infowindow

      # the boxtext is the name of the location (will display inside the inkblot)
      boxText = document.createElement("div")
      boxText.setAttribute("class", 'info-window') # to customize in scss
      boxText.innerHTML = @args.infowindow
      
      # click event listner for opening the story overlay
      $(boxText).on 'click', (e)->
        e.preventDefault()

        # ignore clicks on div (only care about clicks on text)
        if $(e.target).is("div")
          false
        else
          # unhide overlay and get storyIDs from 'data-stories' attribute
          $(".overlay").css "visibility", "visible"
          stories = $(e.target).attr("data-stories").split(",")

        # open bootstrap tabs HTML
        tabsHTML = "<ul class=\"nav nav-tabs\">"
        tabsContentHTML = "<div class=\"tab-content\">"

        # iterate over stories and div scaffolding to the html
        for story of stories
          unless story is '0'
            tabsHTML += "<li><a href=\"#" + (parseInt(story) + 1) + "\" data-toggle=\"tab\">" + (parseInt(story) + 1) + "</a></li>"
            tabsContentHTML += "<div class=\"tab-pane " + stories[story] + "\" id=\"" + (parseInt(story) + 1) + "\"></div>"
          else
            tabsHTML += "<li class=\"active\"><a href=\"#" + (parseInt(story) + 1) + "\" data-toggle=\"tab\">" + (parseInt(story) + 1) + "</a></li>"
            tabsContentHTML += "<div class=\"tab-pane active " + stories[story] + "\" id=\"" + (parseInt(story) + 1) + "\"></div>"
        
        # close the scaffolding and add it to '.story-text'
        tabsHTML += "</ul>"
        tabsContentHTML += "</div>"
        $(".story-text").html tabsHTML + tabsContentHTML

        # AJAX get the stories and add them to the story scaffolding
        for story of stories
          $.get "/stories/" + stories[story] + ".json", (data) ->
            $("div.tab-pane." + data.id).html data.story_text

        false

      @infowindow = new InfoBox(@infobox(boxText))

      # add @bind_infowindow() for < 2.1

    infobox: (boxText)->
      content: boxText
      pixelOffset: new google.maps.Size(-140, 0)
      boxStyle:
        width: "280px"

  # create the map object with the custom infoboxbuilder
  litMap = Gmaps.build 'Google', { builders: { Marker: InfoBoxBuilder} }

  # add to global variables
  root.litmap = litMap

  # styling for the map
  mapStyles = [
    elementType: "labels"
    stylers: [visibility: "off"]
  ,
    featureType: "water"
    stylers: [color: "#b4dedd"]
  ,
    featureType: "road.highway"
    stylers: [visibility: "off"]
  ,
    featureType: "road"
    stylers: [color: "#b4dedd"]
  ,
    featureType: "landscape"
    stylers: [color: "#fcf8f5"]
  ,
    featureType: "administrative"
    stylers: [visibility: "off"]
  ,
    featureType: "poi"
    stylers: [visibility: "off"]
  ,
    featureType: "transit"
    stylers: [visibility: "off"]
  ,
    featureType: "road.arterial"
    stylers: [weight: 0.5]
  ]

  root.markers = [] # not sure if this is important

  # construct the map
  litMap.buildMap
    # pass the styles and options (zoom, control location, etc.)
    provider:
      styles: mapStyles
      center: new google.maps.LatLng(37.776414, -122.436157)
      zoom: 13
      minZoom: 13
      mapTypeControl: false
      panControlOptions:
        position: google.maps.ControlPosition.TOP_RIGHT

      streetViewControlOptions:
        position: google.maps.ControlPosition.TOP_RIGHT

      zoomControlOptions:
        position: google.maps.ControlPosition.TOP_RIGHT

    # map target (div#map)
    internal:
      id: "map"
  , ->

    # get markers from location passed object
    root.markersJSON = #{raw @locationMarkers.to_json}
    root.markers = litMap.addMarkers root.markersJSON # add the markers to the map and save the references to the markers

    # get the map "service object"
    mapObj = litMap.getMap()

    # add a listener to remove the splash when the map tiles are loaded
    google.maps.event.addListener mapObj, "tilesloaded", ->
      $('.splash').remove();

    # bounds and logic to restrict draging outside san francisco
    bounds = new google.maps.LatLngBounds(new google.maps.LatLng(37.678794, -122.618263), new google.maps.LatLng(37.841512, -122.345864))
    google.maps.event.addListener mapObj, "dragend", ->
      return  if bounds.contains(mapObj.getCenter())
      c = mapObj.getCenter()
      x = c.lng()
      y = c.lat()
      maxX = bounds.getNorthEast().lng()
      maxY = bounds.getNorthEast().lat()
      minX = bounds.getSouthWest().lng()
      minY = bounds.getSouthWest().lat()
      x = minX  if x < minX
      x = maxX  if x > maxX
      y = minY  if y < minY
      y = maxY  if y > maxY
      mapObj.setCenter new google.maps.LatLng(y, x)

  # logic to show appropriate icons for certain hovers and activeness (uses menuURLs generated in controller)
  $(".menu-bar").mouseenter ->
    $(".menu-icon").not(".active").each ->
      this.src = menuURLs[$(this).parent().attr('class')+'-text']

  $(".menu-bar").mouseleave ->
    $(".menu-icon").not(".active").each ->
      this.src = menuURLs[$(this).parent().attr('class')+'-notext']

  $(".menu-icon").mouseenter ->
    if $(this).hasClass("active")
      this.src = menuURLs[$(this).parent().attr('class')+'-text']
    else
      this.src = menuURLs[$(this).parent().attr('class')+'-orange']

  $(".menu-icon").mouseleave ->
    if $(this).hasClass("active")
      this.src = menuURLs[$(this).parent().attr('class')+'-orange']
    else
      this.src = menuURLs[$(this).parent().attr('class')+'-text']

  # menu toggle logic for the markers
  $(".menu-icon").click (e)->
    e.preventDefault()
    
    # track what toggle icon was clicked
    toggleTarget = $(e.target).parent().attr('class')

    # only hide classes when icon is marked active
    if $(this).hasClass("active")
      hideMarkers = true
    else
      hideMarkers = false

    # toggle activeness of icon
    $(this).toggleClass("active")

    # loop through markers and toggle
    i = 0
    while i < root.markers.length
      if root.markersJSON[i]['location_type'] is toggleTarget or root.markersJSON[i]['media_type'] is toggleTarget
        if hideMarkers
          root.markers[i].hide()
        else
          if $("."+root.markersJSON[i]['location_type']+" img").hasClass('active') and $("."+root.markersJSON[i]['media_type']+" img").hasClass('active')
            root.markers[i].show()
      i = i + 1

  # go button clicked for search
  $('.search button').click (e)->
    showClear = false
    
    # loop through markers and hide markers without tags
    i = 0
    while i < root.markers.length
      if $('.tt-input').val() is ''
        if $("."+root.markersJSON[i]['location_type']+" img").hasClass('active') and $("."+root.markersJSON[i]['media_type']+" img").hasClass('active')
          root.markers[i].show()
      else if root.markersJSON[i]['location_tags'].indexOf($('.tt-input').val()) is -1
        showClear = true
        root.markers[i].hide()
      i = i + 1

    if showClear
      $('.clear-icon').attr('style', '')


  # not currently being used, but if clear icon is clicked, restore appropriate icons and clear input
  $('.clear-icon').click (e)->
    i = 0
    while i < root.markers.length
      if $("."+root.markersJSON[i]['location_type']+" img").hasClass('active') and $("."+root.markersJSON[i]['media_type']+" img").hasClass('active')
          root.markers[i].show()
      i = i + 1

    $('.clear-icon').attr('style', 'display: none;')


  #  bind click event for closing the story
  $("body").on "click", ".close-story", (e) ->
    e.preventDefault()
    $(".overlay").css "visibility", "hidden"
    $(".story-text").html ""
    false


  #
  # begin typeahead code
  #

  mapTags = (list) ->
    $.map list, (tagname) ->
      tag: tagname

  tags = new Bloodhound(
    datumTokenizer: (d) ->
      Bloodhound.tokenizers.whitespace d.tag

    queryTokenizer: Bloodhound.tokenizers.whitespace
    local: mapTags(#{@tags})
  )

  tags.initialize()

  $(".search input").typeahead null,
    displayKey: "tag"
    source: tags.ttAdapter()

  #
  # end typeahead code
  #